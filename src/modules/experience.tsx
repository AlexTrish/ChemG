// Experience and Level System for ChemG
// –°–∏—Å—Ç–µ–º–∞ –æ–ø—ã—Ç–∞ –∏ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è ChemG

export interface LevelInfo {
  level: number;
  currentXP: number;
  xpForNextLevel: number;
  xpForCurrentLevel: number;
  progressPercent: number;
  title: string;
}

// –§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ XP –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
export const getXPForLevel = (level: number): number => {
  if (level <= 1) return 0;
  return Math.floor(100 * Math.pow(1.5, level - 1));
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–≤–Ω–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É XP
export const getLevelInfo = (currentXP: number): LevelInfo => {
  let level = 1;
  let xpForCurrentLevel = 0;
  
  // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
  while (getXPForLevel(level + 1) <= currentXP) {
    level++;
    xpForCurrentLevel = getXPForLevel(level);
  }
  
  const xpForNextLevel = getXPForLevel(level + 1);
  const xpProgress = currentXP - xpForCurrentLevel;
  const xpNeeded = xpForNextLevel - xpForCurrentLevel;
  const progressPercent = Math.floor((xpProgress / xpNeeded) * 100);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–≤–∞–Ω–∏–µ
  const getTitle = (level: number): string => {
    if (level >= 50) return '–ú–∞—Å—Ç–µ—Ä –•–∏–º–∏–∏';
    if (level >= 40) return '–≠–∫—Å–ø–µ—Ä—Ç';
    if (level >= 30) return '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª';
    if (level >= 20) return '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç';
    if (level >= 15) return '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π';
    if (level >= 10) return '–û–ø—ã—Ç–Ω—ã–π';
    if (level >= 5) return '–£—á–µ–Ω–∏–∫';
    return '–ù–æ–≤–∏—á–æ–∫';
  };
  
  return {
    level,
    currentXP,
    xpForNextLevel,
    xpForCurrentLevel,
    progressPercent,
    title: getTitle(level),
  };
};

// –ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
export const XP_REWARDS = {
  LESSON_COMPLETE: 50,
  TEST_COMPLETE: 100,
  PERFECT_TEST: 150, // –∑–∞ 100% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
  EXPERIMENT_COMPLETE: 75,
  DAILY_LOGIN: 10,
  STREAK_BONUS: 25, // –±–æ–Ω—É—Å –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ–¥—Ä—è–¥
  ACHIEVEMENT_UNLOCK: 200,
  FIRST_TIME_BONUS: 50, // –∑–∞ –ø–µ—Ä–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ–≥–æ-–ª–∏–±–æ
};

// –¢–∏–ø—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
export interface Achievement {
  id: string;
  title: string;
  description: string;
  icon: string;
  xpReward: number;
  condition: (userStats: any) => boolean;
  unlocked?: boolean;
}

// –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
export const ACHIEVEMENTS: Achievement[] = [
  {
    id: 'first_lesson',
    title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
    description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫',
    icon: 'üéØ',
    xpReward: 100,
    condition: (stats) => stats.lessonsCompleted >= 1,
  },
  {
    id: 'chemistry_explorer',
    title: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —Ö–∏–º–∏–∏',
    description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ 5 —É—Ä–æ–∫–æ–≤',
    icon: 'üî¨',
    xpReward: 200,
    condition: (stats) => stats.lessonsCompleted >= 5,
  },
  {
    id: 'test_master',
    title: '–ú–∞—Å—Ç–µ—Ä —Ç–µ—Å—Ç–æ–≤',
    description: '–ü—Ä–æ–π–¥–∏—Ç–µ 10 —Ç–µ—Å—Ç–æ–≤',
    icon: 'üìù',
    xpReward: 300,
    condition: (stats) => stats.testsCompleted >= 10,
  },
  {
    id: 'perfect_score',
    title: '–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
    description: '–ü–æ–ª—É—á–∏—Ç–µ 100% –≤ –ª—é–±–æ–º —Ç–µ—Å—Ç–µ',
    icon: '‚≠ê',
    xpReward: 250,
    condition: (stats) => stats.perfectTests >= 1,
  },
  {
    id: 'week_streak',
    title: '–ù–µ–¥–µ–ª—è –ø–æ–¥—Ä—è–¥',
    description: '–ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
    icon: 'üî•',
    xpReward: 400,
    condition: (stats) => stats.loginStreak >= 7,
  },
  {
    id: 'organic_master',
    title: '–ú–∞—Å—Ç–µ—Ä –æ—Ä–≥–∞–Ω–∏–∫–∏',
    description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –º–æ–¥—É–ª—å –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π —Ö–∏–º–∏–∏',
    icon: 'üß™',
    xpReward: 500,
    condition: (stats) => stats.organicModuleCompleted,
  },
  {
    id: 'inorganic_master',
    title: '–ú–∞—Å—Ç–µ—Ä –Ω–µ–æ—Ä–≥–∞–Ω–∏–∫–∏',
    description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –º–æ–¥—É–ª—å –Ω–µ–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π —Ö–∏–º–∏–∏',
    icon: '‚öóÔ∏è',
    xpReward: 500,
    condition: (stats) => stats.inorganicModuleCompleted,
  },
  {
    id: 'experiment_lover',
    title: '–õ—é–±–∏—Ç–µ–ª—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤',
    description: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ 20 —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤',
    icon: 'üß¨',
    xpReward: 350,
    condition: (stats) => stats.experimentsCompleted >= 20,
  },
  {
    id: 'speed_learner',
    title: '–ë—ã—Å—Ç—Ä—ã–π —É—á–µ–Ω–∏–∫',
    description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ 3 —É—Ä–æ–∫–∞ –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å',
    icon: '‚ö°',
    xpReward: 300,
    condition: (stats) => stats.lessonsInOneDay >= 3,
  },
  {
    id: 'knowledge_seeker',
    title: '–ò—Å–∫–∞—Ç–µ–ª—å –∑–Ω–∞–Ω–∏–π',
    description: '–ü–æ—Ç—Ä–∞—Ç—å—Ç–µ 10 —á–∞—Å–æ–≤ –Ω–∞ –∏–∑—É—á–µ–Ω–∏–µ',
    icon: 'üìö',
    xpReward: 600,
    condition: (stats) => stats.totalTimeSpent >= 36000, // 10 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  },
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
export const checkAchievements = (userStats: any, currentAchievements: string[]): Achievement[] => {
  return ACHIEVEMENTS.filter(achievement => 
    !currentAchievements.includes(achievement.id) && 
    achievement.condition(userStats)
  );
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è XP
export const addExperience = (currentXP: number, amount: number): { newXP: number; leveledUp: boolean; newLevel?: number } => {
  const oldLevel = getLevelInfo(currentXP).level;
  const newXP = currentXP + amount;
  const newLevel = getLevelInfo(newXP).level;
  
  return {
    newXP,
    leveledUp: newLevel > oldLevel,
    newLevel: newLevel > oldLevel ? newLevel : undefined,
  };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–æ–¥—É–ª—è
export const calculateModuleProgress = (completedLessons: number, totalLessons: number): number => {
  if (totalLessons === 0) return 0;
  return Math.floor((completedLessons / totalLessons) * 100);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è
export const getDifficultyForLevel = (level: number): '–ù–∞—á–∞–ª—å–Ω—ã–π' | '–°—Ä–µ–¥–Ω–∏–π' | '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π' => {
  if (level >= 20) return '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π';
  if (level >= 10) return '–°—Ä–µ–¥–Ω–∏–π';
  return '–ù–∞—á–∞–ª—å–Ω—ã–π';
};

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
export default {
  getLevelInfo,
  getXPForLevel,
  addExperience,
  checkAchievements,
  calculateModuleProgress,
  getDifficultyForLevel,
  XP_REWARDS,
  ACHIEVEMENTS,
};