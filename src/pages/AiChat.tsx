import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Send, Bot, User, Trash2, Copy, Sparkles, BookOpen, Lightbulb } from 'lucide-react';
import toast from 'react-hot-toast';

interface Message {
  id: string;
  type: 'user' | 'ai';
  content: string;
  timestamp: Date;
}

const AiChat: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'ai',
      content: '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ —Ö–∏–º–∏–∏. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏! üß™\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ:\n‚Ä¢ –•–∏–º–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∞–∫—Ü–∏—è—Ö –∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è—Ö\n‚Ä¢ –°—Ç—Ä–æ–µ–Ω–∏–∏ –∞—Ç–æ–º–æ–≤ –∏ –º–æ–ª–µ–∫—É–ª\n‚Ä¢ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü–µ\n‚Ä¢ –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π –∏ –Ω–µ–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π —Ö–∏–º–∏–∏\n‚Ä¢ –†–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á\n\n–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
      timestamp: new Date(),
    },
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLTextAreaElement>(null);

  useEffect(() => {
  }, [messages]);

  const quickQuestions = [
    "–û–±—ä—è—Å–Ω–∏ —Å—Ç—Ä–æ–µ–Ω–∏–µ –∞—Ç–æ–º–∞",
    "–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ö–∏–º–∏—á–µ—Å–∫–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ?",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å?",
    "–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü–µ"
  ];

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputMessage,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);

    // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò
    setTimeout(() => {
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        type: 'ai',
        content: generateAiResponse(inputMessage),
        timestamp: new Date(),
      };
      setMessages(prev => [...prev, aiResponse]);
      setIsLoading(false);
    }, 1000 + Math.random() * 2000);
  };

  const generateAiResponse = (question: string): string => {
    const lowerQuestion = question.toLowerCase();
    
    if (lowerQuestion.includes('–∞—Ç–æ–º') || lowerQuestion.includes('—Å—Ç—Ä–æ–µ–Ω–∏–µ')) {
      return `–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ —Å—Ç—Ä–æ–µ–Ω–∏–∏ –∞—Ç–æ–º–∞! üî¨

–ê—Ç–æ–º —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ç—Ä–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —á–∞—Å—Ç–∏—Ü:

**–Ø–¥—Ä–æ:**
‚Ä¢ –ü—Ä–æ—Ç–æ–Ω—ã (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ä—è–¥)
‚Ä¢ –ù–µ–π—Ç—Ä–æ–Ω—ã (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∑–∞—Ä—è–¥)

**–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –æ–±–æ–ª–æ—á–∫–∞:**
‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω—ã (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ä—è–¥)
‚Ä¢ –î–≤–∏–∂—É—Ç—Å—è –ø–æ –æ—Ä–±–∏—Ç–∞–ª—è–º –≤–æ–∫—Ä—É–≥ —è–¥—Ä–∞

**–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:**
1. –ß–∏—Å–ª–æ –ø—Ä–æ—Ç–æ–Ω–æ–≤ = –∞—Ç–æ–º–Ω—ã–π –Ω–æ–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞
2. –ß–∏—Å–ª–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–æ–≤ = —á–∏—Å–ª–æ –ø—Ä–æ—Ç–æ–Ω–æ–≤ (–≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º –∞—Ç–æ–º–µ)
3. –≠–ª–µ–∫—Ç—Ä–æ–Ω—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —Ö–∏–º–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞

–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ –∏–ª–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ö?`;
    }
    
    if (lowerQuestion.includes('—É—Ä–∞–≤–Ω–µ–Ω–∏–µ') || lowerQuestion.includes('—Ä–µ–∞–∫—Ü–∏—è')) {
      return `–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π - –≤–∞–∂–Ω—ã–π –Ω–∞–≤—ã–∫! ‚öóÔ∏è

**–ü–æ—à–∞–≥–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º:**

1. **–ó–∞–ø–∏—Å–∞—Ç—å —Ñ–æ—Ä–º—É–ª—ã** —Ä–µ–∞–≥–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
2. **–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∞—Ç–æ–º—ã** –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
3. **–†–∞—Å—Å—Ç–∞–≤–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã** –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
4. **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å** —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –∞—Ç–æ–º–æ–≤

**–ü—Ä–∏–º–µ—Ä:**
H‚ÇÇ + O‚ÇÇ ‚Üí H‚ÇÇO

–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞:
2H‚ÇÇ + O‚ÇÇ ‚Üí 2H‚ÇÇO

**–ü—Ä–æ–≤–µ—Ä–∫–∞:**
‚Ä¢ H: 4 –∞—Ç–æ–º–∞ —Å–ª–µ–≤–∞ = 4 –∞—Ç–æ–º–∞ —Å–ø—Ä–∞–≤–∞ ‚úì
‚Ä¢ O: 2 –∞—Ç–æ–º–∞ —Å–ª–µ–≤–∞ = 2 –∞—Ç–æ–º–∞ —Å–ø—Ä–∞–≤–∞ ‚úì

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ!`;
    }
    
    if (lowerQuestion.includes('–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å')) {
      return `–í–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å - —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∞—Ç–æ–º–∞ –æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å —Å–≤—è–∑–∏! üîó

**–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:**
–í–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Å–≤—è–∑–µ–π –º–æ–∂–µ—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∞—Ç–æ–º.

**–û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏:**
‚Ä¢ H - I
‚Ä¢ O - II  
‚Ä¢ N - III
‚Ä¢ C - IV
‚Ä¢ Cl - I, III, V, VII

**–ü—Ä–∞–≤–∏–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:**
1. –ü–æ –≥—Ä—É–ø–ø–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –ú–µ–Ω–¥–µ–ª–µ–µ–≤–∞
2. –ü–æ —á–∏—Å–ª—É –Ω–µ—Å–ø–∞—Ä–µ–Ω–Ω—ã—Ö —ç–ª–µ–∫—Ç—Ä–æ–Ω–æ–≤
3. –ü–æ –≥–æ—Ç–æ–≤—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º

**–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:**
–í–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ñ–æ—Ä–º—É–ª—ã:
H‚ÇÇO (H-I, O-II)
NH‚ÇÉ (N-III, H-I)

–ö–∞–∫–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å?`;
    }
    
    const responses = [
      '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–æ...',
      '–û—Ç–ª–∏—á–Ω–æ! –≠—Ç–æ –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞ –≤ —Ö–∏–º–∏–∏. –ù–∞—á–Ω–µ–º —Å –æ—Å–Ω–æ–≤...',
      '–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤! üß™',
      '–≠—Ç–æ –º–æ–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É –º–æ–ª–µ–∫—É–ª—è—Ä–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...',
      '–î–∞–≤–∞–π—Ç–µ –ø–æ—à–∞–≥–æ–≤–æ —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å...'
    ];
    return responses[Math.floor(Math.random() * responses.length)];
  };

  const handleClearChat = () => {
    setMessages([
      {
        id: '1',
        type: 'ai',
        content: '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ —Ö–∏–º–∏–∏. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏! üß™',
        timestamp: new Date(),
      },
    ]);
    toast.success('–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞');
  };

  const handleCopyMessage = (content: string) => {
    navigator.clipboard.writeText(content);
    toast.success('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ');
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleQuickQuestion = (question: string) => {
    setInputMessage(question);
    inputRef.current?.focus();
  };

  return (
    <div className="h-[calc(95vh-10rem)] flex flex-col bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 rounded-lg">
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="flex items-center justify-between p-6 bg-white/50 dark:bg-gray-800/80 backdrop-blur-sm border-b border-gray-200/50 dark:border-gray-700/50 rounded-tl-lg rounded-tr-lg"
      >
        <div className="flex h-[1rem] items-center space-x-4">
          <motion.div
            animate={{ rotate: [0, 10, -10, 0] }}
            transition={{ duration: 2, repeat: Infinity, repeatDelay: 3 }}
            className="p-3 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl"
          >
            <Sparkles className="w-6 h-6 text-white" />
          </motion.div>
          <div>
            <h1 className="text-xl font-semibold text-gray-900 dark:text-white">
              –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ —Ö–∏–º–∏–∏
            </h1>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ö–∏–º–∏–∏
            </p>
          </div>
        </div>
        
        <button
          onClick={handleClearChat}
          className="flex items-center space-x-2 px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 rad rounded-lg transition-all"
        >
          <Trash2 className="w-4 h-4" />
          <span className="text-sm">–û—á–∏—Å—Ç–∏—Ç—å</span>
        </button>
      </motion.div>

      {/* –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π */}
      <div className="flex-1 overflow-hidden rounded-lg">
        <div className="h-full flex flex-col">
          <div className="flex-1 overflow-y-auto p-6 space-y-6 scrollbar-none">
            <AnimatePresence>
              {messages.map((message) => (
                <motion.div
                  key={message.id}
                  initial={{ opacity: 0, y: 20, scale: 0.95 }}
                  animate={{ opacity: 1, y: 0, scale: 1 }}
                  exit={{ opacity: 0, y: -20, scale: 0.95 }}
                  transition={{ duration: 0.3 }}
                  className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div className={`flex items-start space-x-3 max-w-4xl ${
                    message.type === 'user' ? 'flex-row-reverse space-x-reverse' : ''
                  }`}>
                    {/* –ê–≤–∞—Ç–∞—Ä */}
                    <motion.div 
                      whileHover={{ scale: 1.1 }}
                      className={`flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center shadow-lg ${
                        message.type === 'user' 
                          ? 'bg-gradient-to-r from-blue-500 to-blue-600' 
                          : 'bg-gradient-to-r from-purple-500 to-pink-500'
                      }`}
                    >
                      {message.type === 'user' ? (
                        <User className="w-5 h-5 text-white" />
                      ) : (
                        <Bot className="w-5 h-5 text-white" />
                      )}
                    </motion.div>
                    
                    {/* –°–æ–æ–±—â–µ–Ω–∏–µ */}
                    <div className={`relative group ${
                      message.type === 'user' ? 'text-right' : 'text-left'
                    }`}>
                      <motion.div 
                        whileHover={{ scale: 1.01 }}
                        className={`inline-block p-4 rounded-2xl shadow-sm ${
                          message.type === 'user'
                            ? 'bg-gradient-to-r from-blue-500 to-blue-600 text-white'
                            : 'bg-white dark:bg-gray-800 text-gray-900 dark:text-white border border-gray-200 dark:border-gray-700'
                        }`}
                      >
                        <p className="text-sm whitespace-pre-wrap leading-relaxed">{message.content}</p>
                      </motion.div>
                      
                      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                      <div className={`absolute top-2 opacity-0 group-hover:opacity-100 transition-opacity ${
                        message.type === 'user' ? 'left-2' : 'right-2'
                      }`}>
                        <button
                          onClick={() => handleCopyMessage(message.content)}
                          className="p-1 rounded-full bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
                          title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
                        >
                          <Copy className="w-3 h-3 text-gray-500 dark:text-gray-400" />
                        </button>
                      </div>
                      
                      <p className={`text-xs text-gray-500 dark:text-gray-400 mt-2 ${
                        message.type === 'user' ? 'text-right' : 'text-left'
                      }`}>
                        {message.timestamp.toLocaleTimeString('ru-RU', { 
                          hour: '2-digit', 
                          minute: '2-digit' 
                        })}
                      </p>
                    </div>
                  </div>
                </motion.div>
              ))}
            </AnimatePresence>
            
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ */}
            {isLoading && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="flex justify-start"
              >
                <div className="flex items-start space-x-3 max-w-4xl">
                  <div className="flex-shrink-0 w-10 h-10 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 flex items-center justify-center shadow-lg">
                    <Bot className="w-5 h-5 text-white" />
                  </div>
                  <div className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-2xl p-4 shadow-sm">
                    <div className="flex space-x-1">
                      <motion.div 
                        animate={{ scale: [1, 1.2, 1] }}
                        transition={{ duration: 0.6, repeat: Infinity, delay: 0 }}
                        className="w-2 h-2 bg-purple-400 rounded-full"
                      />
                      <motion.div 
                        animate={{ scale: [1, 1.2, 1] }}
                        transition={{ duration: 0.6, repeat: Infinity, delay: 0.2 }}
                        className="w-2 h-2 bg-purple-400 rounded-full"
                      />
                      <motion.div 
                        animate={{ scale: [1, 1.2, 1] }}
                        transition={{ duration: 0.6, repeat: Infinity, delay: 0.4 }}
                        className="w-2 h-2 bg-purple-400 rounded-full"
                      />
                    </div>
                  </div>
                </div>
              </motion.div>
            )}
            
            <div ref={messagesEndRef} />
          </div>
          
          {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="border-t border-gray-200/50 dark:border-gray-700/50 p-4 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm"
          >
            <div className="flex items-center space-x-3 max-w-4xl mx-auto">
              <div className="flex-1 relative">
                <textarea
                  ref={inputRef}
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ —Ö–∏–º–∏–∏..."
                  className="flex items-center w-full h-[1rem] p-3 pr-12 border border-gray-200 dark:border-gray-600 rounded-2xl focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white resize-none transition-all shadow-sm scrollbar-none"
                  rows={1}
                  style={{ minHeight: '52px', maxHeight: '120px' }}
                />
                <div className="absolute right-3 bottom-3 text-xs text-gray-400">
                  {inputMessage.length}/500
                </div>
              </div>
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={handleSendMessage}
                disabled={!inputMessage.trim() || isLoading}
                className="p-4 bg-gradient-to-r from-purple-500 to-pink-500 text-white rounded-2xl hover:from-purple-600 hover:to-pink-600 disabled:opacity-50 disabled:cursor-not-allowed transition-all shadow-lg"
              >
                <Send className="w-5 h-5" />
              </motion.button>
            </div>
            
            <p className="text-xs text-gray-500 dark:text-gray-400 mt-3 text-center">
              –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, Shift+Enter –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            </p>
          </motion.div>
        </div>
      </div>
    </div>
  );
};

export default AiChat;